@model Ebasproyecto.Model.Evento
@{
    ViewBag.Title = "Firma Digital";
    Layout = "~/Views/Shared/_Layout A.cshtml";
    var mensaje = ViewBag.Mensaje as string;
}

<h3>Firma Digital</h3>

<!-- Agregar SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

@if (!string.IsNullOrEmpty(mensaje))
{
    <script>
        Swal.fire({
            icon: 'info', // Usamos el icono de información
            title: '<strong>Tú asistencia ha sido registrada antes ha este evento.</strong>',
            html: '<strong>No puedes volver a registrar nuevamente tú asistencia en el mismo evento.</strong>',
            confirmButtonText: 'Aceptar',
            confirmButtonColor: '#28a745',
            customClass: {
                icon: 'custom-info-icon', // Clase personalizada para el icono
                title: 'custom-title',
                htmlContainer: 'custom-html'
            }
        });
    </script>

    <style>
        /* Cambiar el color del icono de información y el círculo que lo rodea */
        .swal2-info {
            color: #ffd700 !important; /* Hacer el icono amarillo */
        }

        .swal2-icon.swal2-info {
            border-color: #ffd700 !important; /* Cambiar el color del círculo que rodea el icono a amarillo */
        }


        .custom-title {
            color: black;
            font-weight: bold;
        }

        .custom-html {
            color: black;
            font-weight: bold;
        }
    </style>

}

<div style="display: flex; justify-content: center; align-items: center; flex-direction: column; margin-bottom: 20px;">
    <h4>Información del Usuario</h4>
    <table class="table table-striped">
        <tbody>
            <tr>
                <th>Nombres</th>
                <td>@ViewBag.Nombres</td>
            </tr>
            <tr>
                <th>Apellidos</th>
                <td>@ViewBag.Apellidos</td>
            </tr>
            <tr>
                <th>Documento</th>
                <td>@ViewBag.Documento</td>
            </tr>
            <tr>
                <th>Teléfono</th>
                <td>@ViewBag.Telefono</td>
            </tr>
            <tr>
                <th>Correo</th>
                <td>@ViewBag.Correo</td>
            </tr>
            <tr>
                <th>Sexo</th>
                <td>@ViewBag.Sexo</td>
            </tr>
            <tr>
                <th>Tipo de Documento</th>
                <td>@ViewBag.TipoDocumento</td>
            </tr>
            <tr>
                <th>Tipo de Población</th>
                <td>@ViewBag.TipoPoblacion</td>
            </tr>
            <tr>
                <th>Código Ficha</th>
                <td>@ViewBag.CodigoFicha</td>
            </tr>
            <tr>
                <th>Nombre Programa</th>
                <td>@ViewBag.ProgramaNombre</td>
            </tr>
            <tr>
                <th>Nombre del Evento</th>
                <td>@ViewBag.EventoNombre</td>
            </tr>

        </tbody>
    </table>
</div>

<div style="display: flex; justify-content: center; align-items: center; flex-direction: column; margin-top: 20px;">
    <div style="border: 1px solid #000; width: 600px; height: 300px; display: flex; justify-content: center; align-items: center;">
        <canvas id="canvas" style="border: 1px solid #ddd;"></canvas>
    </div>
    <br />
    <div>
        <button id="clearButton" class="btn-custom">Limpiar</button>
        <button id="saveButton" class="btn-custom">Guardar registro</button>
    </div>

    <style>
        .btn-custom {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 16px;
            cursor: pointer;
            border-radius: 5px;
        }

            .btn-custom:hover {
                background-color: #218838; /* Color más oscuro para el hover */
            }
    </style>
</div>

<form id="firmaForm" method="post" action="/Firma/GuardarFirma">
    <input type="hidden" id="firmaData" name="firmaData" />
    <input type="hidden" name="usuarioId" value="@ViewBag.UsuarioId" /> <!-- Añade el ID del usuario -->
    <input type="hidden" name="eventoId" value="@ViewBag.EventoId" /> <!-- Añade el ID del evento -->
    <input type="hidden" name="nombres" value="@ViewBag.Nombres" />
    <input type="hidden" name="nombreevento" value="@ViewBag.EventoNombre" />
</form>

<a id="backButton" class="btn btn-secondary" href="@Url.Action("Index", "HomeAprendiz")" style="position: absolute; bottom: 20px; right: 20px;">Volver</a>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
@if (TempData["Mensaje"] != null)
{
    <script>
        Swal.fire({
            icon: 'success', // Icono de éxito
            title: '¡Éxito!',
            text: '@TempData["Mensaje"]', // Mostrar el mensaje de TempData
            confirmButtonText: 'Aceptar',
            confirmButtonColor: '#28a745' // Mantener el botón verde
        });
    </script>
}



<!-- Agregar SweetAlert2 -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script>
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    let isDrawing = false;

    canvas.width = 600;
    canvas.height = 300;

    // Event listeners para mouse
    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mousemove', draw);
    canvas.addEventListener('mouseup', stopDrawing);
    canvas.addEventListener('mouseout', stopDrawing);

    // Event listeners para touch
    canvas.addEventListener('touchstart', startDrawing);
    canvas.addEventListener('touchmove', draw);
    canvas.addEventListener('touchend', stopDrawing);
    canvas.addEventListener('touchcancel', stopDrawing);

    function startDrawing(e) {
        e.preventDefault();
        isDrawing = true;
        draw(e);
    }

    function draw(e) {
        e.preventDefault();
        if (!isDrawing) return;

        const rect = canvas.getBoundingClientRect();
        const x = (e.clientX || e.touches[0].clientX) - rect.left;
        const y = (e.clientY || e.touches[0].clientY) - rect.top;

        ctx.lineWidth = 2;
        ctx.lineCap = 'round';
        ctx.strokeStyle = '#000';

        ctx.lineTo(x, y);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(x, y);
    }

    function stopDrawing(e) {
        e.preventDefault();
        isDrawing = false;
        ctx.beginPath();
    }

    document.getElementById('clearButton').addEventListener('click', function () {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    });

    document.getElementById('saveButton').addEventListener('click', function (e) {
        const dataURL = canvas.toDataURL('image/png');

        // Crear un canvas vacío para comparar
        const emptyCanvas = document.createElement('canvas');
        emptyCanvas.width = canvas.width;
        emptyCanvas.height = canvas.height;
        const emptyCtx = emptyCanvas.getContext('2d');

        // Comprobar si el contenido del canvas es igual al canvas vacío
        if (dataURL === emptyCanvas.toDataURL('image/png')) {
            Swal.fire({
                icon: 'warning',
                title: '<strong>Firma no recibida</strong>',
                html: '<strong>Por favor, firme antes de guardar.</strong>',
                confirmButtonText: 'Aceptar',
                confirmButtonColor: '#28a745',
                customClass: {
                    icon: 'custom-warning-icon', // Añadir una clase personalizada para el icono
                    title: 'custom-title',
                    htmlcontainer: 'custom-html'
                }
            });
            e.preventDefault(); // Evitar que el formulario se envíe
            return; // Detener la ejecución si el canvas está vacío
        }

        document.getElementById('firmaData').value = dataURL;
        document.getElementById('firmaForm').submit();

    });

    // Cambiar el color del icono de advertencia y el círculo que lo rodea
    const style = document.createElement('style');
    style.innerHTML = `
        .swal2-warning {
            color: #e60000 !important; /* Hacer el icono más rojo */
        }
        .swal2-icon.swal2-warning {
            border-color: #e60000 !important; /* Cambiar el color del círculo que rodea el icono a rojo */
        }

         .custom-title {
         color: black;
        font-weight: bold;
    }

        .custom-html {
        color: black;
        font-weight: bold;
    }
    `;
    document.head.appendChild(style);
</script>
