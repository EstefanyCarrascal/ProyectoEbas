@model Ebasproyecto.Model.Evento
@{
    ViewBag.Title = "Firma Digital";
    Layout = "~/Views/Shared/_Layout A.cshtml";
}

<h3>Firma Digital</h3>

<div style="display: flex; justify-content: center; align-items: center; flex-direction: column; margin-bottom: 20px;">
    <h4>Información del Usuario</h4>
    <table class="table table-bordered" style="width: 80%;">
        <tbody>
            <tr>
                <th>Nombres</th>
                <td>@ViewBag.Nombres</td>
            </tr>
            <tr>
                <th>Apellidos</th>
                <td>@ViewBag.Apellidos</td>
            </tr>
            <tr>
                <th>Documento</th>
                <td>@ViewBag.Documento</td>
            </tr>
            <tr>
                <th>Teléfono</th>
                <td>@ViewBag.Telefono</td>
            </tr>
            <tr>
                <th>Correo</th>
                <td>@ViewBag.Correo</td>
            </tr>
            <tr>
                <th>Sexo</th>
                <td>@ViewBag.Sexo</td>
            </tr>
            <tr>
                <th>Edad</th>
                <td>@ViewBag.Edad</td>
            </tr>
            <tr>
                <th>Municipio</th>
                <td>@ViewBag.Municipio</td>
            </tr>
            <tr>
                <th>Dirección</th>
                <td>@ViewBag.Direccion</td>
            </tr>
            <tr>
                <th>Estado Civil</th>
                <td>@ViewBag.EstadoCivil</td>
            </tr>
            <tr>
                <th>Tipo de Documento</th>
                <td>@ViewBag.TipoDocumento</td>
            </tr>
            <tr>
                <th>Tipo de Población</th>
                <td>@ViewBag.TipoPoblacion</td>
            </tr>
            <tr>
                <th>Tipo de Usuario</th>
                <td>@ViewBag.TipoUsuario</td>
            </tr>
            <tr>
                <th>Nombre del Evento</th>
                <td>@ViewBag.EventoNombre</td>
            </tr>
        </tbody>
    </table>
</div>


<div style="display: flex; justify-content: center; align-items: center; flex-direction: column; margin-top: 20px;">
    <div style="border: 1px solid #000; width: 600px; height: 300px; display: flex; justify-content: center; align-items: center;">
        <canvas id="canvas" style="border: 1px solid #ddd;"></canvas>
    </div>
    <br />
    <div>
        <button id="clearButton">Limpiar</button>
        <button id="saveButton">Guardar Firma</button>
        <!-- Botón "Volver" con estilo y posicionado -->
    </div>
</div>

<form id="firmaForm" method="post" action="@Url.Action("GuardarFirma", "Firma")" style="display:none;">
    <input type="hidden" name="firmaData" id="firmaData">
    <input type="hidden" name="usuarioId" value="@ViewBag.UsuarioId">
    <input type="hidden" name="eventoId" value="@ViewBag.EventoId">
</form>

<!-- Botón "Volver" con estilo y posicionado en la esquina inferior derecha -->
<a id="backButton" class="btn btn-secondary" href="@Url.Action("Index", "HomeAprendiz")" style="position: absolute; bottom: 20px; right: 20px;">Volver</a>

<script>
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');
    let isDrawing = false;

    canvas.width = 600;
    canvas.height = 300;

    // Event listeners para mouse
    canvas.addEventListener('mousedown', startDrawing);
    canvas.addEventListener('mousemove', draw);
    canvas.addEventListener('mouseup', stopDrawing);
    canvas.addEventListener('mouseout', stopDrawing);

    // Event listeners para touch
    canvas.addEventListener('touchstart', startDrawing);
    canvas.addEventListener('touchmove', draw);
    canvas.addEventListener('touchend', stopDrawing);
    canvas.addEventListener('touchcancel', stopDrawing);

    function startDrawing(e) {
        e.preventDefault();
        isDrawing = true;
        draw(e);
    }

    function draw(e) {
        e.preventDefault();
        if (!isDrawing) return;

        // Obtener la posición del touch o del mouse
        const rect = canvas.getBoundingClientRect();
        const x = (e.clientX || e.touches[0].clientX) - rect.left;
        const y = (e.clientY || e.touches[0].clientY) - rect.top;

        ctx.lineWidth = 2;
        ctx.lineCap = 'round';
        ctx.strokeStyle = '#000';

        ctx.lineTo(x, y);
        ctx.stroke();
        ctx.beginPath();
        ctx.moveTo(x, y);
    }

    function stopDrawing(e) {
        e.preventDefault();
        isDrawing = false;
        ctx.beginPath();
    }

    document.getElementById('clearButton').addEventListener('click', function () {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    });

    document.getElementById('saveButton').addEventListener('click', function () {
        const dataURL = canvas.toDataURL('image/png');
        document.getElementById('firmaData').value = dataURL;
        document.getElementById('firmaForm').submit();
    });
</script>
